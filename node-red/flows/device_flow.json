[
    {
        "id": "4b11111ce09a2d82",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "39fa0c843c795d73",
        "type": "inject",
        "z": "4b11111ce09a2d82",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "14278fa538a2d27e"
            ]
        ]
    },
    {
        "id": "418205437efa397b",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "temp",
        "func": "const maxTemp = 13.2;\nconst minTemp = 9.5;\n\nconst amplitude = (maxTemp - minTemp) / 2;\nconst offset = (maxTemp + minTemp) / 2;\nconst period = 60 * 1000;\nconst noiseMean = 0;\nconst noiseStdDev = 0.4;\n\nlet timestamp = msg.payload;\nlet elapsedTime = timestamp % period;\nlet phase = (2 * Math.PI * elapsedTime) / period;\n\nlet sinValue = amplitude * Math.sin(phase) + offset;\n\nlet randomNoise = noiseMean + (noiseStdDev * Math.random());\nsinValue += randomNoise;\n\nmsg.topic = 'temperature'\nmsg.payload = sinValue;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 400,
        "wires": [
            [
                "6fc56288c494302a"
            ]
        ]
    },
    {
        "id": "a0298693e21f3087",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "co2",
        "func": "const maxCO2 = 2500;\nconst minCO2 = 1800;\nconst initialPeriod = 45 * 60 * 1000;  \nconst noiseMean = 0;  \nconst noiseStdDev = 45; \n\nconst amplitude = (maxCO2 - minCO2) / 2; \nconst offset = (maxCO2 + minCO2) / 2;  \n\nlet timestamp = msg.payload;\n\nlet totalElapsedTime = timestamp;\nlet numCycles = Math.floor(totalElapsedTime / initialPeriod);\n\nlet currentPeriod = initialPeriod;\nfor (let i = 0; i < numCycles; i++) {\n    currentPeriod *= 0.9;\n}\n\nlet elapsedTime = totalElapsedTime % currentPeriod;\nlet phase = (2 * Math.PI * elapsedTime) / currentPeriod;\n\nlet sinValue = amplitude * Math.sin(phase) + offset;\n\nlet randomNoise = noiseMean + (noiseStdDev * Math.random());\nsinValue += randomNoise;\n\nmsg.topic = 'co2'\nmsg.payload = sinValue;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 440,
        "wires": [
            [
                "6fc56288c494302a"
            ]
        ]
    },
    {
        "id": "d3dcac1aabd1d567",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "c2h4",
        "func": "const maxC2H4 = 13.2;\nconst minC2H4 = 9.5;\n\nconst amplitude = (maxC2H4 - minC2H4) / 2;\nconst offset = (maxC2H4 + minC2H4) / 2;\nconst period = 60 * 1000;\nconst noiseMean = 0;\nconst noiseStdDev = 0.4;\n\nlet timestamp = msg.payload;\nlet elapsedTime = timestamp % period;\nlet phase = (2 * Math.PI * elapsedTime) / period;\n\nlet sinValue = amplitude * Math.sin(phase) + offset;\n\nlet randomNoise = noiseMean + (noiseStdDev * Math.random());\nsinValue += randomNoise;\n\nmsg.topic = 'c2h4'\nmsg.payload = sinValue;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 480,
        "wires": [
            [
                "6fc56288c494302a"
            ]
        ]
    },
    {
        "id": "6ea4e9b7a6a54272",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "humi",
        "func": "const maxHumi = 98;\nconst minHumi = 92;\n\nconst range = maxHumi - minHumi\n\nlet humidity = maxHumi - (range * Math.random())\n\nmsg.topic = 'humidity'\nmsg.payload = humidity;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 520,
        "wires": [
            [
                "6fc56288c494302a"
            ]
        ]
    },
    {
        "id": "6fc56288c494302a",
        "type": "join",
        "z": "4b11111ce09a2d82",
        "name": "join",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 670,
        "y": 440,
        "wires": [
            [
                "22b1c205c890d9ed"
            ]
        ]
    },
    {
        "id": "3f9386cf4320ca9b",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "date",
        "func": "const date = new Date()\n\nmsg.topic = 'ts'\nmsg.payload = date\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 360,
        "wires": [
            [
                "6fc56288c494302a"
            ]
        ]
    },
    {
        "id": "0247f3b7d738ebc3",
        "type": "mqtt in",
        "z": "4b11111ce09a2d82",
        "name": "sensor",
        "topic": "node/AJ24K01/sensor",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2bccd6ce44c81b4c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 910,
        "y": 440,
        "wires": [
            [
                "7341a924caebf4ae"
            ]
        ]
    },
    {
        "id": "22b1c205c890d9ed",
        "type": "mqtt out",
        "z": "4b11111ce09a2d82",
        "name": "sensor",
        "topic": "node/AJ24K01/sensor",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2bccd6ce44c81b4c",
        "x": 790,
        "y": 440,
        "wires": []
    },
    {
        "id": "7341a924caebf4ae",
        "type": "debug",
        "z": "4b11111ce09a2d82",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 520,
        "wires": []
    },
    {
        "id": "d7e058637bdc74ed",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "photo",
        "func": "// Generate random 5 digit number\nconst randomNum = Math.floor(10000 + Math.random() * 90000);\n\n// Set the payload\nmsg.topic = 'image'\nmsg.payload = `AJ12H4/nk${randomNum}`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 620,
        "wires": [
            [
                "16bd29776b760d1c"
            ]
        ]
    },
    {
        "id": "f8dd23ccddb1d83f",
        "type": "mqtt in",
        "z": "4b11111ce09a2d82",
        "name": "photo",
        "topic": "node/AJ24K01/image",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2bccd6ce44c81b4c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 910,
        "y": 600,
        "wires": [
            [
                "7341a924caebf4ae"
            ]
        ]
    },
    {
        "id": "1f8e5f2a27902176",
        "type": "mqtt out",
        "z": "4b11111ce09a2d82",
        "name": "photo",
        "topic": "node/AJ24K01/image",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2bccd6ce44c81b4c",
        "x": 790,
        "y": 600,
        "wires": []
    },
    {
        "id": "16bd29776b760d1c",
        "type": "join",
        "z": "4b11111ce09a2d82",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 670,
        "y": 600,
        "wires": [
            [
                "1f8e5f2a27902176"
            ]
        ]
    },
    {
        "id": "4de6967b47aa9608",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "date",
        "func": "const date = new Date()\n\nmsg.topic = 'ts'\nmsg.payload = date\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 580,
        "wires": [
            [
                "16bd29776b760d1c"
            ]
        ]
    },
    {
        "id": "423acfc56e8de7ce",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "5 secs",
        "func": "// Initialize a variable to keep track of the last forwarded time\ncontext.lastForwardedTime = context.lastForwardedTime || Date.now();\n\n// Calculate the current time\nconst currentTime = Date.now();\n\n// Calculate the elapsed time since the last forwarded message\nconst elapsedTime = currentTime - context.lastForwardedTime;\n\n// Check if 5 seconds have passed since the last forwarded message\nif (elapsedTime >= 5000) {\n    // Update the last forwarded time to the current time\n    context.lastForwardedTime = currentTime;\n\n    // Forward the message to the next node\n    return msg;\n} else {\n    // If less than 5 seconds have passed, do not forward the message\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 600,
        "wires": [
            [
                "4de6967b47aa9608",
                "d7e058637bdc74ed"
            ]
        ]
    },
    {
        "id": "eae841ea670ce0b8",
        "type": "mqtt in",
        "z": "4b11111ce09a2d82",
        "name": "",
        "topic": "node/AJ24K01/cmd",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2bccd6ce44c81b4c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 100,
        "wires": [
            [
                "514ae6c7ab16b216"
            ]
        ]
    },
    {
        "id": "14278fa538a2d27e",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "Pass or Block",
        "func": "const action = flow.get('AJ24K01');\nif (action === 'start') {\n    return msg;\n} else {\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 560,
        "wires": [
            [
                "3f9386cf4320ca9b",
                "418205437efa397b",
                "a0298693e21f3087",
                "d3dcac1aabd1d567",
                "6ea4e9b7a6a54272",
                "423acfc56e8de7ce",
                "2beff09ef9c86070"
            ]
        ]
    },
    {
        "id": "514ae6c7ab16b216",
        "type": "switch",
        "z": "4b11111ce09a2d82",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 100,
        "wires": [
            [
                "e70360f21fb924a2"
            ],
            [
                "9ca29b6b6c6b312a"
            ]
        ]
    },
    {
        "id": "9ca29b6b6c6b312a",
        "type": "change",
        "z": "4b11111ce09a2d82",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AJ24K01",
                "pt": "flow",
                "to": "stop",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 120,
        "wires": [
            [
                "99197b07e8b9436b"
            ]
        ]
    },
    {
        "id": "e70360f21fb924a2",
        "type": "change",
        "z": "4b11111ce09a2d82",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AJ24K01",
                "pt": "flow",
                "to": "start",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 80,
        "wires": [
            [
                "99197b07e8b9436b"
            ]
        ]
    },
    {
        "id": "37e6e346db96849f",
        "type": "comment",
        "z": "4b11111ce09a2d82",
        "name": "control flow device 1",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "368d6159f640b735",
        "type": "comment",
        "z": "4b11111ce09a2d82",
        "name": "Device flow device 1",
        "info": "",
        "x": 130,
        "y": 240,
        "wires": []
    },
    {
        "id": "99197b07e8b9436b",
        "type": "debug",
        "z": "4b11111ce09a2d82",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 100,
        "wires": []
    },
    {
        "id": "a8ec5009e1a5ef25",
        "type": "inject",
        "z": "4b11111ce09a2d82",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1280,
        "wires": [
            [
                "abe049aa1a26db8c"
            ]
        ]
    },
    {
        "id": "99e978f9c1548945",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "temp",
        "func": "const maxTemp = 13.2;\nconst minTemp = 9.5;\n\nconst amplitude = (maxTemp - minTemp) / 2;\nconst offset = (maxTemp + minTemp) / 2;\nconst period = 60 * 1000;\nconst noiseMean = 0;\nconst noiseStdDev = 0.4;\n\nlet timestamp = msg.payload;\nlet elapsedTime = timestamp % period;\nlet phase = (2 * Math.PI * elapsedTime) / period;\n\nlet sinValue = amplitude * Math.sin(phase) + offset;\n\nlet randomNoise = noiseMean + (noiseStdDev * Math.random());\nsinValue += randomNoise;\n\nmsg.topic = 'temperature'\nmsg.payload = sinValue;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1180,
        "wires": [
            [
                "62479c950afdb834"
            ]
        ]
    },
    {
        "id": "14ecb191af9de3c3",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "co2",
        "func": "const maxCO2 = 2500;\nconst minCO2 = 1800;\nconst initialPeriod = 45 * 60 * 1000;  \nconst noiseMean = 0;  \nconst noiseStdDev = 45; \n\nconst amplitude = (maxCO2 - minCO2) / 2; \nconst offset = (maxCO2 + minCO2) / 2;  \n\nlet timestamp = msg.payload;\n\nlet totalElapsedTime = timestamp;\nlet numCycles = Math.floor(totalElapsedTime / initialPeriod);\n\nlet currentPeriod = initialPeriod;\nfor (let i = 0; i < numCycles; i++) {\n    currentPeriod *= 0.9;\n}\n\nlet elapsedTime = totalElapsedTime % currentPeriod;\nlet phase = (2 * Math.PI * elapsedTime) / currentPeriod;\n\nlet sinValue = amplitude * Math.sin(phase) + offset;\n\nlet randomNoise = noiseMean + (noiseStdDev * Math.random());\nsinValue += randomNoise;\n\nmsg.topic = 'co2'\nmsg.payload = sinValue;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1220,
        "wires": [
            [
                "62479c950afdb834"
            ]
        ]
    },
    {
        "id": "35a73f3ad034c0fc",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "c2h4",
        "func": "const maxC2H4 = 13.2;\nconst minC2H4 = 9.5;\n\nconst amplitude = (maxC2H4 - minC2H4) / 2;\nconst offset = (maxC2H4 + minC2H4) / 2;\nconst period = 60 * 1000;\nconst noiseMean = 0;\nconst noiseStdDev = 0.4;\n\nlet timestamp = msg.payload;\nlet elapsedTime = timestamp % period;\nlet phase = (2 * Math.PI * elapsedTime) / period;\n\nlet sinValue = amplitude * Math.sin(phase) + offset;\n\nlet randomNoise = noiseMean + (noiseStdDev * Math.random());\nsinValue += randomNoise;\n\nmsg.topic = 'c2h4'\nmsg.payload = sinValue;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1260,
        "wires": [
            [
                "62479c950afdb834"
            ]
        ]
    },
    {
        "id": "2c185fca4b5a3743",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "humi",
        "func": "const maxHumi = 98;\nconst minHumi = 92;\n\nconst range = maxHumi - minHumi\n\nlet humidity = maxHumi - (range * Math.random())\n\nmsg.topic = 'humidity'\nmsg.payload = humidity;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1300,
        "wires": [
            [
                "62479c950afdb834"
            ]
        ]
    },
    {
        "id": "62479c950afdb834",
        "type": "join",
        "z": "4b11111ce09a2d82",
        "name": "join",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 670,
        "y": 1220,
        "wires": [
            [
                "2acd5e79cf748dfe"
            ]
        ]
    },
    {
        "id": "90646f5e2a80cdb3",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "date",
        "func": "const date = new Date()\n\nmsg.topic = 'ts'\nmsg.payload = date\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1140,
        "wires": [
            [
                "62479c950afdb834"
            ]
        ]
    },
    {
        "id": "eca77cda1d2dfa61",
        "type": "mqtt in",
        "z": "4b11111ce09a2d82",
        "name": "sensor",
        "topic": "node/SN43JK9/sensor",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2bccd6ce44c81b4c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 910,
        "y": 1220,
        "wires": [
            [
                "2cf363dbd71e68f8"
            ]
        ]
    },
    {
        "id": "2acd5e79cf748dfe",
        "type": "mqtt out",
        "z": "4b11111ce09a2d82",
        "name": "sensor",
        "topic": "node/SN43JK9/sensor",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2bccd6ce44c81b4c",
        "x": 790,
        "y": 1220,
        "wires": []
    },
    {
        "id": "2cf363dbd71e68f8",
        "type": "debug",
        "z": "4b11111ce09a2d82",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1300,
        "wires": []
    },
    {
        "id": "573be41a7314860b",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "photo",
        "func": "// Generate random 5 digit number\nconst randomNum = Math.floor(10000 + Math.random() * 90000);\n\n// Set the payload\nmsg.topic = 'image'\nmsg.payload = `AJ12H4/nk${randomNum}`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1400,
        "wires": [
            [
                "5213d77fe98a04b2"
            ]
        ]
    },
    {
        "id": "d0fc639ec14ff329",
        "type": "mqtt in",
        "z": "4b11111ce09a2d82",
        "name": "photo",
        "topic": "node/SN43JK9/image",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2bccd6ce44c81b4c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 910,
        "y": 1380,
        "wires": [
            [
                "2cf363dbd71e68f8"
            ]
        ]
    },
    {
        "id": "8f47896b07e3c7ab",
        "type": "mqtt out",
        "z": "4b11111ce09a2d82",
        "name": "photo",
        "topic": "node/SN43JK9/image",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2bccd6ce44c81b4c",
        "x": 790,
        "y": 1380,
        "wires": []
    },
    {
        "id": "5213d77fe98a04b2",
        "type": "join",
        "z": "4b11111ce09a2d82",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 670,
        "y": 1380,
        "wires": [
            [
                "8f47896b07e3c7ab"
            ]
        ]
    },
    {
        "id": "0813d09083c248ee",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "date",
        "func": "const date = new Date()\n\nmsg.topic = 'ts'\nmsg.payload = date\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1360,
        "wires": [
            [
                "5213d77fe98a04b2"
            ]
        ]
    },
    {
        "id": "f809662719fec487",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "5 secs",
        "func": "// Initialize a variable to keep track of the last forwarded time\ncontext.lastForwardedTime = context.lastForwardedTime || Date.now();\n\n// Calculate the current time\nconst currentTime = Date.now();\n\n// Calculate the elapsed time since the last forwarded message\nconst elapsedTime = currentTime - context.lastForwardedTime;\n\n// Check if 5 seconds have passed since the last forwarded message\nif (elapsedTime >= 5000) {\n    // Update the last forwarded time to the current time\n    context.lastForwardedTime = currentTime;\n\n    // Forward the message to the next node\n    return msg;\n} else {\n    // If less than 5 seconds have passed, do not forward the message\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1380,
        "wires": [
            [
                "0813d09083c248ee",
                "573be41a7314860b"
            ]
        ]
    },
    {
        "id": "8b10a7875a27d005",
        "type": "mqtt in",
        "z": "4b11111ce09a2d82",
        "name": "",
        "topic": "node/SN43JK9/cmd",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2bccd6ce44c81b4c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 880,
        "wires": [
            [
                "76d44d02e6cbfdd8"
            ]
        ]
    },
    {
        "id": "abe049aa1a26db8c",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "Pass or Block",
        "func": "const action = flow.get('SN43JK9');\nif (action === 'start') {\n    return msg;\n} else {\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1340,
        "wires": [
            [
                "90646f5e2a80cdb3",
                "99e978f9c1548945",
                "14ecb191af9de3c3",
                "35a73f3ad034c0fc",
                "2c185fca4b5a3743",
                "f809662719fec487",
                "a4c6e505ca2129da"
            ]
        ]
    },
    {
        "id": "76d44d02e6cbfdd8",
        "type": "switch",
        "z": "4b11111ce09a2d82",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 880,
        "wires": [
            [
                "597853cff97d9c25"
            ],
            [
                "febc9b0c805c5621"
            ]
        ]
    },
    {
        "id": "febc9b0c805c5621",
        "type": "change",
        "z": "4b11111ce09a2d82",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SN43JK9",
                "pt": "flow",
                "to": "stop",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 900,
        "wires": [
            [
                "82965493a24282b4"
            ]
        ]
    },
    {
        "id": "597853cff97d9c25",
        "type": "change",
        "z": "4b11111ce09a2d82",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "SN43JK9",
                "pt": "flow",
                "to": "start",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 860,
        "wires": [
            [
                "82965493a24282b4"
            ]
        ]
    },
    {
        "id": "8c609821c309c811",
        "type": "comment",
        "z": "4b11111ce09a2d82",
        "name": "control flow device 2",
        "info": "",
        "x": 130,
        "y": 820,
        "wires": []
    },
    {
        "id": "83447b208dbbf1ce",
        "type": "comment",
        "z": "4b11111ce09a2d82",
        "name": "Device flow device 2",
        "info": "",
        "x": 130,
        "y": 1020,
        "wires": []
    },
    {
        "id": "82965493a24282b4",
        "type": "debug",
        "z": "4b11111ce09a2d82",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 880,
        "wires": []
    },
    {
        "id": "a4c6e505ca2129da",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "Node ID",
        "func": "const nodeID = 'SN43JK9'\n\nmsg.topic = 'nodeID'\nmsg.payload = nodeID\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1080,
        "wires": [
            [
                "62479c950afdb834",
                "5213d77fe98a04b2"
            ]
        ]
    },
    {
        "id": "2beff09ef9c86070",
        "type": "function",
        "z": "4b11111ce09a2d82",
        "name": "Node ID",
        "func": "const nodeID = 'AJ24K01'\n\nmsg.topic = 'nodeID'\nmsg.payload = nodeID\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 300,
        "wires": [
            [
                "6fc56288c494302a",
                "16bd29776b760d1c"
            ]
        ]
    },
    {
        "id": "2bccd6ce44c81b4c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]